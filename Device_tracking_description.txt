Устройство: "Умный термометр"  
│  
├── Сервис `1809` (Health Thermometer)  
│   ├── Характеристика `2A1C` (Temperature)  
│   │   ├── Значение: `36.6` (в байтах)  
│   │   ├── Дескриптор `2901`: "Температура тела"  
│   │   └── Дескриптор `2904`: Единица измерения = °C  
│   │  
│   └── Характеристика `2A21` (Measurement Interval)  
│       ├── Значение: `5000` (интервал в мс)  
│       └── Дескриптор `2902`: Уведомления выключены (`0x00`)  
│  
└── Сервис `180F` (Battery)  
    └── Характеристика `2A19` (Battery Level)  
        ├── Значение: `85` (85%)  
        └── Дескриптор `2901`: "Заряд батареи"  

=============================================================================
Пример передаваемых данных по Bluetooth
=============================================================================

Данный код, описанный в файле Device_tracking, обладает следующим 
функционалом:

1. Сканирование доступных устройств для подключения
2. Подключение к устройству BLE и получение информации с характеристики,
   описывающей средний темп сердечного ритма
3. Компоновка в словарь TRANSMIT_DATA для дальнейшей передачи

=============================================================================
Реализация:
=============================================================================

Общие сведения:

В ходе работы были использованы библиотеки BLEAK (работа с BLE устройствами)
и ASYNCIO для выполнения асинхронных задач.

Код использует методы ООП, где описывается класс DeviceBracelet, содержащий
информацию о действующем устройстве (пульсометр, имя в сети которого 
начинается на H1_). Параметры класса:

self.name = name
self.address = address - MAC-адрес
self.heart_rate = 0 - темп сердцебиения
self._client = None - класс BleakClient для управления устройством
self.status = False - статус подключения

Для отслеживания браслет/человек был реализован словарь DICTOWNERS:

DICTOWNERS = {
    "1": ["H1_31543", None],
    "2": ["H1_38200", None],
    "3": ["H1_39251", None],
    "4": ["H1_39415", None],
    "5": ["H1_40673", None],
    "6": ["H1_41002", None]
}

Для отслеживания и переподключения устройств.

=============================================================================

1. Программа запускает поиск устройств
2. Если такие найдены, создается объект по классу и заполняется информация
3. Параллельно идет подключение устройств. Если их status = False,
   то есть устройство отключено. При подключении status = True
4. Подключенные устройства сопоставляются с DICTOWNERS - вместо заглушки
   DICTOWNERS[KEY][1] на это место встает объект браслета
5. Данные выводятся и составляется TRANSMIT_DATA

=============================================================================
Основные функции
=============================================================================

Методы класса DeviceBracelet

[connect] 
- Подключение к устройству с помощью BleakClient
  callback-функция - on_disconnect
- Изменение статуса устройства
- Подписка на получение уведомлений с устройства (start_notify)
  callback-функция heart_rate_callback
- Сопоставление с DICTOWNERS

[on_disconnect] /вызывается при разрыве соединения/
- Разрыв соединения через unpair
- Изменение информации о ритме на "N/D"
- Изменение статуса устройства

[heart_rate_callback] /вызывается, когда данные характеристики изменились/
- Получение и запись данных о пульсе
- Обновление информации

=============================================================================
Прочие функции
=============================================================================

[scan_devices] 
- Поиск устройств по критерию (начало имени устройства - H1_)
- Создание объектов по классу

[continuous_scan]
- Продолжает вызов сканирования устройств во время работы программы

[monitor_devices]
- Проходит по словарю DICTOWNERS и проверяет статусы подключения устройств
- Создает список задач подключения устройств 
- Запускает асинхронно задачи
- Синхронизирует работу всех функций

[print_status] /Упрощенный вариант/
- Формирует TRANSMIT_DATA
- Выводит TRANSMIT_DATA в консоль 

[print_status] /Сложный вариант/
- Выводит в консоль всю служебную информацию
- Выводит таблицу со всеми данными с браслетов
- Уведомления о подключении/отключении