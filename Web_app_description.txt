=============================================================================
Документация проекта, связанного с работой веб-приложения
=============================================================================

Весь функционал проекта сорежоточен вокруг вебприложения написанного с 
помощью фреймворка flask

Веб-приложение состоит из двух страниц - первая(для рендеринга графики 
с отображением текущих данных), вторая - странница для управления выводимых
данных(открыватеся при добавлении /manage к адресу)

=============================================================================

Часть проекта, отвечающую за работу веб-приложения составляют

-   WEB_app.py - описано веб-приложение
-   HTML & CSS код для страниц
-   script.js - код для функционала главной страницы и подтянивания данных
-   manager.js - код для управления основной страницы, задает порядок данных

=============================================================================

WEB_app.py 

с помошью @app.route выделены блоки программы, которые выполняются при
заходе пользователя/пост-гет запросу 

render_template - рендеринг страницы, указанной в качестве аргумента
/*ВАЖНО - html документы хранятся в templates*/
/*ВАЖНО - CSS документы хранятся в static*/

1   @app.route("/")
Рендеринг основной стараницы - index.html

2   @app.route("/manage")
Рендеринг управляющей стараницы - manager_page.html

3   @app.route('/update_order', methods=['POST'])
При получении пост запроса меняет значение текущего порядка спортсменов(json)
current_order - хранит значения [место в графике: номер браслета] 

4   @app.route('/get_order')
Передает current_order на фронтенд для правильного отображения порядка 

5   @app.route("/get_heart_rate")  
Запускает функцию get_data, которая считывает данные из файла, в котороый
идет запись данных с пульсометров(реализовано в Device_tracking). Потом 
эти данные уходят на фронтенд

=============================================================================

Перед тем как говорить о работе файлов js следует сказать, как происходит
работа в целом

/*ВАЖНО - WEB_app и Device_tracking запускаются в разных терминалах*/

1 - програма Device_tracking получает данные и записывает их в файл
2 - WEB_app - подгружаются страницы и подключаются js-файлы
3 - manager.js - отправляется пост запрос с порядком из формы и записываеся 
    на бекенде (*2)
4 - работает script.js (период 1с от загрузки файла)
    |
    |=> получает данные о порядке (*1)
    | 
    |=> получает данные о значениях пульса (*2)
    |
    |=>по этим данным добавляет в html разметку с блокми и значеиями

(*1) - WEB_app[get_data] - считывает данные из файла

=============================================================================

manager.js

Собирает данные с форм и отправляет информацию о порядке на бекенд

=============================================================================

script.js

начинает свою работу после загрузки файла и повторно запусает работу функции 
fetchHeartRate каждую секунду

fetchHeartRate - отвечает за вывод данных с пульсометров

функция отправляет длв fetch-запроса на бекенд: на get_order и get_heart_rate

Первая формирует представление о порядке участников(данные с manage) 
Вторая получает непосредственно значения 

по ним формеруются dirrection_data и data 

далее по заранее приготовленному шаблону в блок с классом titrs в качестве
дочерних элементов добавляется разметка по каждому из участников

также для каждого из дочерних элементов titrs - описано условие начала 
анимации

=============================================================================